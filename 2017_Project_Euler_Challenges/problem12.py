#==============================================================================
# The sequence of triangle numbers is generated by adding the natural numbers. So the
# 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms 
# would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?
# 
#==============================================================================
import time
import math
import numpy as np

def divisors(x):
    """Finds all of the divisors of x and returns a list of them"""
    x = int(x)
    factors = []
    for i in range(1,x+1):
        if x%i == 0:
            factors.append(i)
    return factors

def get_factors(n):
    """Returns the number of factors of n""" #i dont get this one
    return sum(2 for i in range(1, round(math.sqrt(n)+1)) if not n % i)

def genfact(n):
    """generates a list of all of the divisors of n much faster"""
    t=[]
    for i in range(1,int(np.sqrt(n)+1)):
        if(n%i==0):
           t.append(i)
           t.append(n/i)
    return list(set(t))

def trianglenum(n):
    """returns the nth triangle number"""    
    return n*(n+1)/2

def problem12():
    factors = []
    n = 1000
    while len(factors) <= 500:
        x = int(trianglenum(n))
        factors = genfact(x)
        n += 1
    return x
start = time.clock()
print(problem12())
stop = time.clock()
print("The time:", stop - start)
